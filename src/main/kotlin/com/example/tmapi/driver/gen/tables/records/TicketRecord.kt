/*
 * This file is generated by jOOQ.
 */
package com.example.tmapi.driver.gen.tables.records


import com.example.tmapi.driver.gen.tables.Ticket

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class TicketRecord() : UpdatableRecordImpl<TicketRecord>(Ticket.TICKET), Record8<Int?, Int?, String?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?> {

    var ticketId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var projectId: Int?
        set(value) = set(1, value)
        get() = get(1) as Int?

    var title: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var explanation: String?
        set(value) = set(3, value)
        get() = get(3) as String?

    var reporter: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var worker: Int?
        set(value) = set(5, value)
        get() = get(5) as Int?

    var createAt: LocalDateTime?
        set(value) = set(6, value)
        get() = get(6) as LocalDateTime?

    var updateAt: LocalDateTime?
        set(value) = set(7, value)
        get() = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, Int?, String?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, Int?, String?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row8<Int?, Int?, String?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row8<Int?, Int?, String?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = Ticket.TICKET.TICKET_ID
    override fun field2(): Field<Int?> = Ticket.TICKET.PROJECT_ID
    override fun field3(): Field<String?> = Ticket.TICKET.TITLE
    override fun field4(): Field<String?> = Ticket.TICKET.EXPLANATION
    override fun field5(): Field<Int?> = Ticket.TICKET.REPORTER
    override fun field6(): Field<Int?> = Ticket.TICKET.WORKER
    override fun field7(): Field<LocalDateTime?> = Ticket.TICKET.CREATE_AT
    override fun field8(): Field<LocalDateTime?> = Ticket.TICKET.UPDATE_AT
    override fun component1(): Int? = ticketId
    override fun component2(): Int? = projectId
    override fun component3(): String? = title
    override fun component4(): String? = explanation
    override fun component5(): Int? = reporter
    override fun component6(): Int? = worker
    override fun component7(): LocalDateTime? = createAt
    override fun component8(): LocalDateTime? = updateAt
    override fun value1(): Int? = ticketId
    override fun value2(): Int? = projectId
    override fun value3(): String? = title
    override fun value4(): String? = explanation
    override fun value5(): Int? = reporter
    override fun value6(): Int? = worker
    override fun value7(): LocalDateTime? = createAt
    override fun value8(): LocalDateTime? = updateAt

    override fun value1(value: Int?): TicketRecord {
        ticketId = value
        return this
    }

    override fun value2(value: Int?): TicketRecord {
        projectId = value
        return this
    }

    override fun value3(value: String?): TicketRecord {
        title = value
        return this
    }

    override fun value4(value: String?): TicketRecord {
        explanation = value
        return this
    }

    override fun value5(value: Int?): TicketRecord {
        reporter = value
        return this
    }

    override fun value6(value: Int?): TicketRecord {
        worker = value
        return this
    }

    override fun value7(value: LocalDateTime?): TicketRecord {
        createAt = value
        return this
    }

    override fun value8(value: LocalDateTime?): TicketRecord {
        updateAt = value
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: String?, value4: String?, value5: Int?, value6: Int?, value7: LocalDateTime?, value8: LocalDateTime?): TicketRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised TicketRecord
     */
    constructor(ticketId: Int? = null, projectId: Int? = null, title: String? = null, explanation: String? = null, reporter: Int? = null, worker: Int? = null, createAt: LocalDateTime? = null, updateAt: LocalDateTime? = null): this() {
        this.ticketId = ticketId
        this.projectId = projectId
        this.title = title
        this.explanation = explanation
        this.reporter = reporter
        this.worker = worker
        this.createAt = createAt
        this.updateAt = updateAt
    }
}
