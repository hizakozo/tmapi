/*
 * This file is generated by jOOQ.
 */
package com.example.tmapi.driver.gen.tables


import com.example.tmapi.driver.gen.Tmapi
import com.example.tmapi.driver.gen.indexes.USER_PROJECT_PROJECT_ID
import com.example.tmapi.driver.gen.indexes.USER_PROJECT_USER_ID
import com.example.tmapi.driver.gen.keys.KEY_USER_PROJECT_PRIMARY
import com.example.tmapi.driver.gen.keys.USER_PROJECT_IBFK_1
import com.example.tmapi.driver.gen.keys.USER_PROJECT_IBFK_2
import com.example.tmapi.driver.gen.tables.records.UserProjectRecord

import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class UserProject(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserProjectRecord>?,
    aliased: Table<UserProjectRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserProjectRecord>(
    alias,
    Tmapi.TMAPI,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>tmapi.user_project</code>
         */
        val USER_PROJECT = UserProject()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserProjectRecord> = UserProjectRecord::class.java

    /**
     * The column <code>tmapi.user_project.user_project_id</code>.
     */
    val USER_PROJECT_ID: TableField<UserProjectRecord, Int?> = createField(DSL.name("user_project_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>tmapi.user_project.user_id</code>.
     */
    val USER_ID: TableField<UserProjectRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tmapi.user_project.project_id</code>.
     */
    val PROJECT_ID: TableField<UserProjectRecord, Int?> = createField(DSL.name("project_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>tmapi.user_project.create_at</code>.
     */
    val CREATE_AT: TableField<UserProjectRecord, LocalDateTime?> = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>tmapi.user_project.update_at</code>.
     */
    val UPDATE_AT: TableField<UserProjectRecord, LocalDateTime?> = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<UserProjectRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserProjectRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>tmapi.user_project</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>tmapi.user_project</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>tmapi.user_project</code> table reference
     */
    constructor(): this(DSL.name("user_project"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserProjectRecord>): this(Internal.createPathAlias(child, key), child, key, USER_PROJECT, null)
    override fun getSchema(): Schema = Tmapi.TMAPI
    override fun getIndexes(): List<Index> = listOf(USER_PROJECT_PROJECT_ID, USER_PROJECT_USER_ID)
    override fun getIdentity(): Identity<UserProjectRecord, Int?> = super.getIdentity() as Identity<UserProjectRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<UserProjectRecord> = KEY_USER_PROJECT_PRIMARY
    override fun getKeys(): List<UniqueKey<UserProjectRecord>> = listOf(KEY_USER_PROJECT_PRIMARY)
    override fun getReferences(): List<ForeignKey<UserProjectRecord, *>> = listOf(USER_PROJECT_IBFK_1, USER_PROJECT_IBFK_2)
    fun user(): User = User(this, USER_PROJECT_IBFK_1)
    fun project(): Project = Project(this, USER_PROJECT_IBFK_2)
    override fun `as`(alias: String): UserProject = UserProject(DSL.name(alias), this)
    override fun `as`(alias: Name): UserProject = UserProject(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserProject = UserProject(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserProject = UserProject(name, null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row5<Int?, Int?, Int?, LocalDateTime?, LocalDateTime?>
}
