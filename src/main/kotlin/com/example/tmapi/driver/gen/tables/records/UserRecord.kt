/*
 * This file is generated by jOOQ.
 */
package com.example.tmapi.driver.gen.tables.records


import com.example.tmapi.driver.gen.tables.User

import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
class UserRecord() : UpdatableRecordImpl<UserRecord>(User.USER), Record6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> {

    var userId: Int?
        set(value) = set(0, value)
        get() = get(0) as Int?

    var userName: String?
        set(value) = set(1, value)
        get() = get(1) as String?

    var avatar: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var isDelete: Byte?
        set(value) = set(3, value)
        get() = get(3) as Byte?

    var createAt: LocalDateTime?
        set(value) = set(4, value)
        get() = get(4) as LocalDateTime?

    var updateAt: LocalDateTime?
        set(value) = set(5, value)
        get() = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row6<Int?, String?, String?, Byte?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = User.USER.USER_ID
    override fun field2(): Field<String?> = User.USER.USER_NAME
    override fun field3(): Field<String?> = User.USER.AVATAR
    override fun field4(): Field<Byte?> = User.USER.IS_DELETE
    override fun field5(): Field<LocalDateTime?> = User.USER.CREATE_AT
    override fun field6(): Field<LocalDateTime?> = User.USER.UPDATE_AT
    override fun component1(): Int? = userId
    override fun component2(): String? = userName
    override fun component3(): String? = avatar
    override fun component4(): Byte? = isDelete
    override fun component5(): LocalDateTime? = createAt
    override fun component6(): LocalDateTime? = updateAt
    override fun value1(): Int? = userId
    override fun value2(): String? = userName
    override fun value3(): String? = avatar
    override fun value4(): Byte? = isDelete
    override fun value5(): LocalDateTime? = createAt
    override fun value6(): LocalDateTime? = updateAt

    override fun value1(value: Int?): UserRecord {
        userId = value
        return this
    }

    override fun value2(value: String?): UserRecord {
        userName = value
        return this
    }

    override fun value3(value: String?): UserRecord {
        avatar = value
        return this
    }

    override fun value4(value: Byte?): UserRecord {
        isDelete = value
        return this
    }

    override fun value5(value: LocalDateTime?): UserRecord {
        createAt = value
        return this
    }

    override fun value6(value: LocalDateTime?): UserRecord {
        updateAt = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: Byte?, value5: LocalDateTime?, value6: LocalDateTime?): UserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised UserRecord
     */
    constructor(userId: Int? = null, userName: String? = null, avatar: String? = null, isDelete: Byte? = null, createAt: LocalDateTime? = null, updateAt: LocalDateTime? = null): this() {
        this.userId = userId
        this.userName = userName
        this.avatar = avatar
        this.isDelete = isDelete
        this.createAt = createAt
        this.updateAt = updateAt
    }
}
